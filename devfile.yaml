schemaVersion: 2.2.0
variables:
  APP_NAME: costoptstreamlitodo
  IMAGE_NAME: healthfirstdocker/costoptstreamlitodo:latest
  CONTAINER_PORT: "8601"
metadata:
  name: costoptstreamlitodo
  version: 1.0.0
  description: A web service template.
  language: Python
  architectures: [ 'amd64' ]
components:
  - name: runtime
    container:
      image: registry.access.redhat.com/ubi9/python-39:1-1739420387
      endpoints:
        - name: http-8601
          targetPort: 8601
  # This will build the container image before deployment
  - name: outerloop-build
    image:
      dockerfile:
        buildContext: ${PROJECT_SOURCE}
        rootRequired: false
        uri: ./Dockerfile
        args:
          - '--platform=linux/amd64'
      imageName: "{{IMAGE_NAME}}"
  - name: outerloop-url
    kubernetes:
      inlined: |
        apiVersion: route.openshift.io/v1
        kind: Route
        metadata:
          name: {{APP_NAME}}
        spec:
          path: /
          to:
            kind: Service
            name: {{APP_NAME}}
          port:
            targetPort: {{CONTAINER_PORT}}      

  # This will create a Deployment in order to run your container image across
  # the cluster.
  - name: outerloop-deployment
    kubernetes:
      inlined: |
        kind: Deployment
        apiVersion: apps/v1
        metadata:
          name: {{APP_NAME}}
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: {{APP_NAME}}
          template:
            metadata:
              labels:
                app: {{APP_NAME}}
            spec:
              containers:
                - name: {{APP_NAME}}
                  image: {{IMAGE_NAME}}
                  ports:
                    - name: http
                      containerPort: {{CONTAINER_PORT}}
                      protocol: TCP
                  resources:
                    limits:
                      memory: "1024Mi"
                      cpu: "500m"

  # This will create a Service so your Deployment is accessible.
  # Depending on your cluster, you may modify this code so it's a
  # NodePort, ClusterIP or a LoadBalancer service.
  - name: outerloop-service
    kubernetes:
      inlined: |
        apiVersion: v1
        kind: Service
        metadata:
          name: {{APP_NAME}}
        spec:
          ports:
          - name: "{{CONTAINER_PORT}}"
            port: {{CONTAINER_PORT}}
            protocol: TCP
            targetPort: {{CONTAINER_PORT}}
          selector:
            app: {{APP_NAME}}
          type: NodePort
commands:
# - id: apt-get
#   exec:
#     commandLine: sudo apt-get update && sudo apt-get install -y build-essential curl ca-certificates software-properties-common git && rm -rf /var/lib/apt/lists/*
#     component: runtime
#     group:
#       kind: build
#       isDefault: true
 - id: pip
   exec:
     commandLine: pip3 install -r requirements.txt
     component: runtime
     workingDir: ${PROJECT_SOURCE}
     group:
       kind: build
       isDefault: true
 - id: ssocache
   exec:
     commandLine: mkdir -p /tmp/.aws/sso/cache
     component: runtime
     group:
       kind: build
 - id: package
   composite:
    commands:
#      - apt-get
      - pip
      - ssocache
    parallel: false
 - id: run
   exec:
    commandLine: streamlit run HF_CostOpt_Home.py --server.port=8601 --server.address=0.0.0.0
    component: runtime
    workingDir: ${PROJECT_SOURCE}
    group:
      isDefault: true
      kind: run
 - id: deploy
   composite:
     commands:
     - build-image
     - k8s-deployment
     - k8s-service
     - k8s-url
     group:
       isDefault: true
       kind: deploy
  # Below are the commands and their respective components that they are "linked" to deploy
 - id: build-image
   apply:
     component: outerloop-build
 - id: k8s-deployment
   apply:
     component: outerloop-deployment
 - id: k8s-service
   apply:
     component: outerloop-service
 - id: k8s-url
   apply:
     component: outerloop-url